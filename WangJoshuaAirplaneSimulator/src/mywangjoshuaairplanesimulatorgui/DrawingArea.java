/*
 * Draws the plan landing or arriving
 */
package mywangjoshuaairplanesimulatorgui;

/**
 *
 * @author 340889765
 */
//import libraries
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
public class DrawingArea extends javax.swing.JPanel {
    
    //declares image and timer
    Image airplaneTakeOff, airplaneArrivals;
    static Timer t1;
    
    //declare variables
    static int airplaneX;
    static int airplaneY;
    static int addX;
    static int addY;
    static int currentTime = 4;
    static boolean arrivalsCounter = false;
    static boolean takeOffCounter = true;
    static boolean startPressed = false;
    static boolean planeGenerate = false;
    
    /**
     * Creates new form DrawingArea
     */
    public DrawingArea() {
        initComponents();
        //gets images
        airplaneTakeOff = Toolkit.getDefaultToolkit().getImage("AirplaneTakeOff"
                + ".png");
        airplaneArrivals = Toolkit.getDefaultToolkit().getImage("AirplaneArriva"
                + "ls.png");
        //declares time and starts it
        t1 = new Timer(100, new DrawingArea.TimerListener());
        t1.start();
    }
    
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        //if plane has been generated and start has been pressed
        if(startPressed && planeGenerate){
            //if it can takeoff and current time is 2
            if(takeOffCounter && currentTime == 2){
                //reset plane location so it can takeoff
                airplaneX = 0;
                airplaneY = 72;
                //change variables to move plane (goes up)
                addX = 12;
                addY = -4;
            //if it can land and start current time is 4
            }else if(arrivalsCounter && currentTime == 4){
                //resets plane location so it can takeoff
                airplaneX = 0;
                airplaneY = 0;
                //change variables to move plane (goes down)
                addX = 6;
                addY = 3;
            }
            //if takeoff is true
            if(takeOffCounter){
                //draw image based on take off image
                g.drawImage(airplaneTakeOff, airplaneX, airplaneY, this);
            //if landing is true
            }else if(arrivalsCounter){
                //draw image based on arrivals image
                g.drawImage(airplaneArrivals, airplaneX, airplaneY, this);
            }
            //draw line as a runaway
            g.drawLine(0,100,120,100);
            //change plane location to simulate animation
            airplaneX+=addX;
            airplaneY+=addY;
        }
    }
    
    private class TimerListener implements ActionListener{
        @Override
        public void actionPerformed(ActionEvent ae){
            //repaints frame
            repaint();
        }
    }
    
    /**
     * Intakes boolean value to determine if start button has been pressed
     * returns from main method
     * @param start - boolean that sees if start button has been pressed
     */
    public static void setBoolean(boolean start){
        startPressed = start;
    }
    
    /**
     * If both lists are empty, don't generate the plane (false), else you can
     * (true)
     * returns from main method
     * @param plane - boolean to see if you can generate plane
     */
    public static void setBooleanPlane(boolean plane){
        planeGenerate = plane;
    }
    
    /**
     * If true,it means the plane is taking off, else it is false
     * returns from main method
     * @param takeoff - boolean to see if plan is taking off
     */
    public static void setTakeOff(boolean takeoff){
        takeOffCounter = takeoff;
    }
    
    /**
     * If true, it means the plane is landing, else it is false
     * returns from main method
     * @param arrivals - boolean to see if plan is arriving
     */
    public static void setArrivals(boolean arrivals){
        arrivalsCounter = arrivals;
    }
    
    /**
     * returns current time from main method
     * @param time - int which represents current time counter for plane program
     */
    public static void setTime(int time){
        currentTime = time;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
